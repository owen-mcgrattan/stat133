for(i in 1:nrow(move)) {
move$off_z[i] <- mean(remove_missing(move[i, 9:12]))
move$off_x[i] <- mean(remove_missing(move[i, 22:25]))
}
# merge datasets together
big_savant <- merge(big_savant, move, by = "player_name")
# merge datasets together
big_savant <- merge(big_savant, move, by = "player_name")
big_savant$zdiff <- big_savant$fb_z - big_savant$off_z
knitr::opts_chunk$set(echo = TRUE)
require(readr)
require(ggplot2)
require(dplyr)
#import first savant dataset
savant <- read_csv("~/baseball/pitch_usage_behind/data/offspeed_behind_17.csv")
# import other savant dataset
savant2 <- read_csv("~/baseball/pitch_usage_behind/data/fastball_behind_17.csv")
# drop ryan tepera
savant <- filter(savant, player_name != c("Ryan Tepera", "Hector Neris"))
savant2 <- filter(savant2, player_name != "Ryan Tepera")
savant$xwoba <- as.numeric(savant$xwoba)
a <- ggplot(savant, aes(x = pitch_percent, y = xwoba)) + geom_point() + geom_smooth(method = lm) + labs(x = "Pitch%", y = "xwOBA", title = "Offspeed usage in hitter's counts")
ggsave(filename = "offspeed_xwoba.png", a, height = 5, width = 8)
savant2 <- filter(savant2,pitches > 50)
b <- ggplot(savant2, aes(x = pitch_percent, y = xwoba, color = velocity)) + geom_point() + geom_smooth(method = lm, color = "darkgrey") + labs(x = "Pitch%", y = "xwOBA", title = "Fastball usage in hitter's counts") + scale_color_gradient2(midpoint = mean(savant2$velocity), low="blue", mid="white",high="red", space ="Lab" )
ggsave("fastball_xwoba.png", b, height = 5, width = 8)
mean(savant$xwoba)
mean(savant2$xwoba)
require(ggrepel)
# check differentials
big_savant <- merge(savant, savant2, by = "player_name")
big_savant$diff <- big_savant$xwoba.y - big_savant$xwoba.x
big_savant <- filter(big_savant, pitches.x > 50)
# redo pitch percent to be out of total thrown in counts when hitter is ahead
big_savant$pitch_pct <- 100 * (big_savant$pitches.x / (big_savant$pitches.x + big_savant$pitches.y))
c <- ggplot(big_savant, aes(pitch_pct, diff)) + geom_point() + geom_smooth(method = lm) + labs(x = "Offspeed pitch%", y = "Diff in xwOBA (xwOBA fastballs - xwOBA offspeed)", title = "Diff in xwOBA in hitters counts")
ggsave("diff_xwoba.png", c, height = 5, width = 8)
mean(big_savant$diff)
# whiffs for both groups
big_savant$whiff_pct.x <- big_savant$whiffs.x / big_savant$pitches.x
big_savant$whiff_pct.y <- big_savant$whiffs.y / big_savant$pitches.y
mean(big_savant$whiff_pct.x)
mean(big_savant$whiff_pct.y)
# import zone% numbers for offspeed and fastballs
# both data sets are pitches in the zone (the pitches column is number of pitches in the zone)
off_behind <- read_csv("~/baseball/pitch_usage_behind/data/off_behind_zone_17.csv")
fast_behind <- read_csv("~/baseball/pitch_usage_behind/data/fast_behind_zone_17.csv")
# calculate takes, whiffs percentages for both
off_behind$swstr <- off_behind$whiffs / (off_behind$total_pitches)
fast_behind$swstr <- fast_behind$whiffs / fast_behind$total_pitches
off_behind$tk_pct <- off_behind$takes / off_behind$total_pitches
fast_behind$tk_pct <- fast_behind$takes / fast_behind$total_pitches
mean(off_behind$tk_pct)
mean(fast_behind$tk_pct)
# check differences of zone% for both groups
median(off_behind$pitch_percent)
median(fast_behind$pitch_percent)
# check exit velocity and xwoba for both groups
d <- ggplot(data = off_behind, aes(x = launch_speed, y = xwoba, color = "Offspeed")) + geom_point() + geom_point(data = fast_behind, aes(color = "Fastballs")) + labs(x = "Exit velo", title = "Exit velo and xwoba on pitches in zone (hitter ahead)") + scale_color_manual("Pitch type", values = c('Offspeed' = "blue", 'Fastballs' = "red"))
ggsave("exit_velo_behind.png", d, height = 5, width = 8)
mean(off_behind$launch_speed)
mean(fast_behind$launch_speed)
mean(off_behind$xwoba)
mean(fast_behind$xwoba)
sd(off_behind$launch_speed)
sd(fast_behind$launch_speed)
# get avg diff between fastball and offspeed
big_savant$velo_diff <- big_savant$velocity.y - big_savant$velocity.x
ggplot(data = big_savant, aes(pitch_percent.x, xwoba.x, color = velo_diff)) + geom_point()+ labs(x = "Pitch%", y = "xwOBA") + scale_color_gradient2(midpoint = mean(big_savant$velo_diff), low="blue", mid="white",high="red", space ="Lab" )
# incorporate pitch movement
# bring in both pitch movement datasets
vmove <- read_csv("~/Downloads/FanGraphs Leaderboard-55.csv")
hmove <- read_csv("~/Downloads/FanGraphs Leaderboard-56.csv")
colnames(vmove)[1] <- "player_name"
colnames(hmove)[1] <- "player_name"
move <- merge(vmove, hmove, by = "player_name")
# create a remove missing function
remove_missing <- function(x) {
x <- x[!is.na(x)]
return(x)
}
# calculate avg fb movement for all pitchers
for(i in 1:nrow(move)){
move$fb_z[i] <- mean(remove_missing(move[i,4:7]))
move$fb_x[i] <- mean(remove_missing(move[i, 17:20]))
}
# calculate avg offspeed (no changeups) movement for all pitchers
for(i in 1:nrow(move)) {
move$off_z[i] <- mean(remove_missing(move[i, 9:12]))
move$off_x[i] <- mean(remove_missing(move[i, 22:25]))
}
# merge datasets together
big_savant <- merge(big_savant, move, by = "player_name")
big_savant$zdiff <- big_savant$fb_z - big_savant$off_z
big_savant$xdiff <- big_savant$fb_x - big_savant$off_x
# visualize
ggplot(data = big_savant, aes(pitch_percent.x, xwoba.x, color = velo_diff)) + geom_point()+ labs(x = "Pitch%", y = "xwOBA") + scale_color_gradient2(midpoint = mean(big_savant$zdiff), low="blue", mid="white",high="red", space ="Lab" )
# visualize
ggplot(data = big_savant, aes(pitch_percent.x, xwoba.x, color = zdiff)) + geom_point()+ labs(x = "Pitch%", y = "xwOBA") + scale_color_gradient2(midpoint = mean(big_savant$zdiff), low="blue", mid="white",high="red", space ="Lab" )
# visualize
ggplot(data = big_savant, aes(pitch_percent.x, xwoba.x, color = xdiff)) + geom_point()+ labs(x = "Pitch%", y = "xwOBA") + scale_color_gradient2(midpoint = mean(big_savant$xdiff), low="blue", mid="white",high="red", space ="Lab" )
knitr::opts_chunk$set(echo = TRUE)
require(readr)
require(ggplot2)
require(dplyr)
#import first savant dataset
savant <- read_csv("~/baseball/pitch_usage_behind/data/offspeed_behind_17.csv")
# import other savant dataset
savant2 <- read_csv("~/baseball/pitch_usage_behind/data/fastball_behind_17.csv")
# drop ryan tepera
savant <- filter(savant, player_name != c("Ryan Tepera", "Hector Neris"))
savant2 <- filter(savant2, player_name != "Ryan Tepera")
savant$xwoba <- as.numeric(savant$xwoba)
a <- ggplot(savant, aes(x = pitch_percent, y = xwoba)) + geom_point() + geom_smooth(method = lm) + labs(x = "Pitch%", y = "xwOBA", title = "Offspeed usage in hitter's counts")
ggsave(filename = "offspeed_xwoba.png", a, height = 5, width = 8)
savant2 <- filter(savant2,pitches > 50)
b <- ggplot(savant2, aes(x = pitch_percent, y = xwoba, color = velocity)) + geom_point() + geom_smooth(method = lm, color = "darkgrey") + labs(x = "Pitch%", y = "xwOBA", title = "Fastball usage in hitter's counts") + scale_color_gradient2(midpoint = mean(savant2$velocity), low="blue", mid="white",high="red", space ="Lab" )
ggsave("fastball_xwoba.png", b, height = 5, width = 8)
mean(savant$xwoba)
mean(savant2$xwoba)
require(ggrepel)
# check differentials
big_savant <- merge(savant, savant2, by = "player_name")
big_savant$diff <- big_savant$xwoba.y - big_savant$xwoba.x
big_savant <- filter(big_savant, pitches.x > 50)
# redo pitch percent to be out of total thrown in counts when hitter is ahead
big_savant$pitch_pct <- 100 * (big_savant$pitches.x / (big_savant$pitches.x + big_savant$pitches.y))
c <- ggplot(big_savant, aes(pitch_pct, diff)) + geom_point() + geom_smooth(method = lm) + labs(x = "Offspeed pitch%", y = "Diff in xwOBA (xwOBA fastballs - xwOBA offspeed)", title = "Diff in xwOBA in hitters counts")
ggsave("diff_xwoba.png", c, height = 5, width = 8)
mean(big_savant$diff)
# whiffs for both groups
big_savant$whiff_pct.x <- big_savant$whiffs.x / big_savant$pitches.x
big_savant$whiff_pct.y <- big_savant$whiffs.y / big_savant$pitches.y
mean(big_savant$whiff_pct.x)
mean(big_savant$whiff_pct.y)
# import zone% numbers for offspeed and fastballs
# both data sets are pitches in the zone (the pitches column is number of pitches in the zone)
off_behind <- read_csv("~/baseball/pitch_usage_behind/data/off_behind_zone_17.csv")
fast_behind <- read_csv("~/baseball/pitch_usage_behind/data/fast_behind_zone_17.csv")
# calculate takes, whiffs percentages for both
off_behind$swstr <- off_behind$whiffs / (off_behind$total_pitches)
fast_behind$swstr <- fast_behind$whiffs / fast_behind$total_pitches
off_behind$tk_pct <- off_behind$takes / off_behind$total_pitches
fast_behind$tk_pct <- fast_behind$takes / fast_behind$total_pitches
mean(off_behind$tk_pct)
mean(fast_behind$tk_pct)
# check differences of zone% for both groups
median(off_behind$pitch_percent)
median(fast_behind$pitch_percent)
# check exit velocity and xwoba for both groups
d <- ggplot(data = off_behind, aes(x = launch_speed, y = xwoba, color = "Offspeed")) + geom_point() + geom_point(data = fast_behind, aes(color = "Fastballs")) + labs(x = "Exit velo", title = "Exit velo and xwoba on pitches in zone (hitter ahead)") + scale_color_manual("Pitch type", values = c('Offspeed' = "blue", 'Fastballs' = "red"))
ggsave("exit_velo_behind.png", d, height = 5, width = 8)
mean(off_behind$launch_speed)
mean(fast_behind$launch_speed)
mean(off_behind$xwoba)
mean(fast_behind$xwoba)
sd(off_behind$launch_speed)
sd(fast_behind$launch_speed)
# get avg diff between fastball and offspeed
big_savant$velo_diff <- big_savant$velocity.y - big_savant$velocity.x
ggplot(data = big_savant, aes(pitch_percent.x, xwoba.x, color = velo_diff)) + geom_point()+ labs(x = "Pitch%", y = "xwOBA") + scale_color_gradient2(midpoint = mean(big_savant$velo_diff), low="blue", mid="white",high="red", space ="Lab" )
# incorporate pitch movement
# bring in both pitch movement datasets
vmove <- read_csv("~/Downloads/FanGraphs Leaderboard-55.csv")
hmove <- read_csv("~/Downloads/FanGraphs Leaderboard-56.csv")
colnames(vmove)[1] <- "player_name"
colnames(hmove)[1] <- "player_name"
move <- merge(vmove, hmove, by = "player_name")
# create a remove missing function
remove_missing <- function(x) {
x <- x[!is.na(x)]
return(x)
}
# calculate avg fb movement for all pitchers
for(i in 1:nrow(move)){
move$fb_z[i] <- mean(remove_missing(move[i,4:7]))
move$fb_x[i] <- mean(remove_missing(move[i, 17:20]))
}
# calculate avg offspeed (no changeups) movement for all pitchers
for(i in 1:nrow(move)) {
move$off_z[i] <- mean(remove_missing(move[i, 9:12]))
move$off_x[i] <- mean(remove_missing(move[i, 22:25]))
}
# merge datasets together
big_savant <- merge(big_savant, move, by = "player_name")
big_savant$zdiff <- big_savant$fb_z - big_savant$off_z
big_savant$xdiff <- big_savant$fb_x - big_savant$off_x
big_savant$abs_diff <- abs(big_savant$zdiff) + abs(big_savant$xdiff)
# visualize
ggplot(data = big_savant, aes(pitch_percent.x, xwoba.x, color = abs_diff)) + geom_point()+ labs(x = "Offspeed Pitch%", y = "xwOBA") + scale_color_gradient2(midpoint = mean(big_savant$abs_diff), low="blue", mid="white",high="red", space ="Lab" )
# visualize
ggplot(data = big_savant, aes(pitch_percent.x, xwoba.x, color = abs(xdiff))) + geom_point()+ labs(x = "Offspeed Pitch%", y = "xwOBA") + scale_color_gradient2(midpoint = mean(abs(big_savant$zdiff)), low="blue", mid="white",high="red", space ="Lab" )
big_savant %>%
filter(xwoba.x < mean(xwoba.x)) %>%
mean(abs(xdiff))
big_savant %>%
filter(xwoba.x < mean(xwoba.x)) %>%
big_savant %>%
filter(xwoba.x < mean(xwoba.x))
big_savant %>%
filter(xwoba.x < mean(xwoba.x)) %>%
mean(xdiff)
# Title: Hw 04
# Description:
#   Clean the rawscores data for hw04
#
# Inputs:
#   rawscores.csv
# Outputs:
#   cleanscores.csv
# set proper working directory
setwd("~/stat133/stat133-hws-fall17/hw04/code")
# load in functions
source("../code/functions.R")
# read in rawscores data
raw <- read.csv("../data/rawdata/rawscores.csv")
# sink structure of the dataframe
sink('../output/summary-rawscore.txt')
str(raw)
# summary stats
summary_stats(raw)
# print stats
print_stats(summary_stats(raw))
sink()
# data cleaning
# replace all NA values with 0
for(i in 1:nrow(raw)) {
for(j in 1:ncol(raw)){
if(is.na(raw[i,j])) {
raw[i,j] <- 0
}
}
}
# rescale QZ1
raw$QZ1 <- rescale100(raw$QZ1, xmin = 0, xmax = 12)
# rescale QZ2
raw$QZ2 <- rescale100(raw$QZ2, xmin = 0, xmax = 18)
# rescale QZ3
raw$QZ3 <- rescale100(raw$QZ3, xmin = 0, xmax = 20)
# rescale QZ4
raw$QZ4 <- rescale100(raw$QZ4, xmin = 0, xmax = 20)
# rescale test1
raw$test1 <- rescale100(raw$EX1, xmin = 0, xmax = 80)
# rescale test2
raw$test2 <- rescale100(raw$EX2, xmin = 0, xmax = 90)
# add homework variable
for(i in 1:nrow(raw)){
raw$homework[i] <- score_homework(raw[i,1:9], drop = TRUE)
}
# add in quiz variable
for(i in 1:nrow(raw)){
raw$quiz[i] <- score_quiz(raw[i, 11:14], drop = TRUE)
}
# create overall score
raw$overall <- (score_lab(raw$ATT) * 0.1) + (raw$homework * 0.3) +
(raw$quiz * 0.15) + (raw$EX1 * 0.2) + (raw$EX2 * 0.25)
# calculate letter grade
for(i in 1:nrow(raw)){
if (raw$overall[i] >= 95 & raw$overall[i] <= 100){
raw$grade[i] <- "A+"
} else if(raw$overall[i] < 95 & raw$overall[i] >= 90) {
raw$grade[i] <- "A"
} else if (raw$overall[i] < 90 & raw$overall[i] >= 88){
raw$grade[i] <- "A-"
} else if (raw$overall[i] < 88 & raw$overall[i] >= 86) {
raw$grade[i] <- "B+"
} else if (raw$overall[i] < 86 & raw$overall[i] >= 82) {
raw$grade[i] <- "B"
} else if (raw$overall[i] < 82 & raw$overall[i] >= 79.5) {
raw$grade[i] <- "B-"
} else if (raw$overall[i] < 79.5 & raw$overall[i] >= 77.5) {
raw$grade[i] <- "C+"
} else if (raw$overall[i] < 77.5 & raw$overall[i] >= 70) {
raw$grade[i] <- "C"
} else if (raw$overall[i] < 70 & raw$overall[i] >= 60) {
raw$grade[i] <- "C-"
} else if (raw$overal[i] < 60 & raw$overall[i] >= 50) {
raw$grade[i] <- "D"
} else {
raw$grade[i] <- "F"
}
}
# set names to be extracted
name <- names(raw)[17:21]
# for loop to extract summary stats
for (i in name) {
sink(paste("../output/", "-stats.txt", sep = i))
summary_stats(raw[[i]])
print_stats(raw[[i]])
}
raw[,"test1"]
# set names to be extracted
name <- names(raw)[17:21]
# for loop to extract summary stats
for (i in name) {
sink(paste("../output/", "-stats.txt", sep = i))
summary_stats(raw[[i]])
print_stats(raw[[i]])
sink()
}
for (i in name) {
sink(paste("../output/", "-stats.txt", sep = i))
summary_stats(raw[,i])
print_stats(raw[,i])
sink()
}
str_pad?
?str_pad
# Title: Hw 04
# Description:
#   Clean the rawscores data for hw04
#
# Inputs:
#   rawscores.csv
# Outputs:
#   cleanscores.csv
# set proper working directory
setwd("~/stat133/stat133-hws-fall17/hw04/code")
# load in functions
source("../code/functions.R")
library(stringr)
# read in rawscores data
raw <- read.csv("../data/rawdata/rawscores.csv")
# sink structure of the dataframe
sink('../output/summary-rawscore.txt')
str(raw)
# summary stats
summary_stats(raw)
# print stats
print_stats(summary_stats(raw))
sink()
# data cleaning
# replace all NA values with 0
for(i in 1:nrow(raw)) {
for(j in 1:ncol(raw)){
if(is.na(raw[i,j])) {
raw[i,j] <- 0
}
}
}
# rescale QZ1
raw$QZ1 <- rescale100(raw$QZ1, xmin = 0, xmax = 12)
# rescale QZ2
raw$QZ2 <- rescale100(raw$QZ2, xmin = 0, xmax = 18)
# rescale QZ3
raw$QZ3 <- rescale100(raw$QZ3, xmin = 0, xmax = 20)
# rescale QZ4
raw$QZ4 <- rescale100(raw$QZ4, xmin = 0, xmax = 20)
# rescale test1
raw$test1 <- rescale100(raw$EX1, xmin = 0, xmax = 80)
# rescale test2
raw$test2 <- rescale100(raw$EX2, xmin = 0, xmax = 90)
# add homework variable
for(i in 1:nrow(raw)){
raw$homework[i] <- score_homework(raw[i,1:9], drop = TRUE)
}
# add in quiz variable
for(i in 1:nrow(raw)){
raw$quiz[i] <- score_quiz(raw[i, 11:14], drop = TRUE)
}
# create overall score
raw$overall <- (score_lab(raw$ATT) * 0.1) + (raw$homework * 0.3) +
(raw$quiz * 0.15) + (raw$EX1 * 0.2) + (raw$EX2 * 0.25)
# calculate letter grade
for(i in 1:nrow(raw)){
if (raw$overall[i] >= 95 & raw$overall[i] <= 100){
raw$grade[i] <- "A+"
} else if(raw$overall[i] < 95 & raw$overall[i] >= 90) {
raw$grade[i] <- "A"
} else if (raw$overall[i] < 90 & raw$overall[i] >= 88){
raw$grade[i] <- "A-"
} else if (raw$overall[i] < 88 & raw$overall[i] >= 86) {
raw$grade[i] <- "B+"
} else if (raw$overall[i] < 86 & raw$overall[i] >= 82) {
raw$grade[i] <- "B"
} else if (raw$overall[i] < 82 & raw$overall[i] >= 79.5) {
raw$grade[i] <- "B-"
} else if (raw$overall[i] < 79.5 & raw$overall[i] >= 77.5) {
raw$grade[i] <- "C+"
} else if (raw$overall[i] < 77.5 & raw$overall[i] >= 70) {
raw$grade[i] <- "C"
} else if (raw$overall[i] < 70 & raw$overall[i] >= 60) {
raw$grade[i] <- "C-"
} else if (raw$overal[i] < 60 & raw$overall[i] >= 50) {
raw$grade[i] <- "D"
} else {
raw$grade[i] <- "F"
}
}
# set names to be extracted
name <- names(raw)[17:21]
# for loop to extract summary stats
for (i in name) {
sink(paste("../output/", "-stats.txt", sep = i))
summary_stats(raw[,i])
print_stats(raw[,i])
sink()
}
summary_stats(raw[,"test1"])
# set names to be extracted
name <- names(raw)[17:21]
# for loop to extract summary stats
for (i in name) {
sink(paste("../output/", "-stats.txt", sep = i))
summary_stats(raw[,i])
print_stats(raw[,i])
sink()
}
for (i in name) {
sink(paste("../output/", "-stats.txt", sep = i))
summary_stats(raw)
print_stats(raw)
sink()
}
for (i in name) {
sink(paste("../output/", "-stats.txt", sep = i))
summary_stats(raw[1:23])
print_stats(raw[1:23])
sink()
}
for (i in name) {
sink(paste("../output/", "-stats.txt", sep = i))
summary_stats(raw[,1:23])
print_stats(raw[,1:23])
sink()
}
for (i in name) {
sink(paste("../output/", "-stats.txt", sep = i))
summary_stats(raw[,1:21])
print_stats(raw[,1:21])
sink()
}
for(i in name){}
for(i in name){ }
for(i in 1:length(name)) {}
for(i in name) {
print(i)
}
library(testthat)
setwd("~/stat133/stat133-hws-fall17/hw04/code")
source('functions.R')
sink('../output/test-reporter.txt')
test_file('tests.R')
sink()
names(raw)[17:21]
closeAllConnections()
names(raw)
names(raw)[17:21]
# set names to be extracted
name <- names(raw)[17:21]
# for loop to extract summary stats
for (i in name) {
sink(paste("../output/", "-stats.txt", sep = i))
summary_stats(raw[,i])
print_stats(raw[,i])
sink()
}
raw[,"test1"]
for (i in name) {
sink(paste("../output/", "-stats.txt", sep = i))
summary_stats(raw[,i])
print_stats(summary_stats(raw[,i]))
sink()
}
name
for(i in name) { print(i)}
paste("../output/", "-stats.txt", sep = "test1")
summary_stats(raw$test1)
summary_stats(raw[,"test1"])
for (i in name) {
sink(paste("../output/", "-stats.txt", sep = i))
summary_stats(raw[,i])
print_stats(summary_stats(raw[,i]))
sink()
}
for (i in 17:21) {
sink(paste("../output/", "-stats.txt", sep = colnames(raw)[i]))
summary_stats(raw[,i])
print_stats(summary_stats(raw[,i]))
sink()
}
print_stats(summary_stats(raw[,"test1"]))
colnames(raw)[1]
# sink() structure of data frame
sink("../output/summary-cleanscores.txt")
str(raw)
sink()
for (i in 17:21) {
sink(paste("../output/", "-stats.txt", sep = colnames(raw)[i]))
print(summary_stats(raw[,i]))
print(print_stats(summary_stats(raw[,i])))
sink()
}
# write cleandata.csv
write.csv(x = raw, file = "../data/cleandata/cleandata.csv")
shiny::runApp('~/stat133/stat133-hws-fall17/hw04/app/gradevis')
runApp('~/stat133/stat133-hws-fall17/hw04/app/gradevis')
table(raw$grade)
prop.table(raw$grade)
prop.table(table(raw$grade))
margin.table(table(raw$grade))
margin.table(table(raw$grade), 1)
prop.table(table(raw$grade), 1)
prop.table(table(raw$grade), 2)
runApp('~/stat133/stat133-hws-fall17/hw04/app/gradevis')
runApp('~/stat133/stat133-hws-fall17/hw04/app/gradevis')
runApp('~/stat133/stat133-hws-fall17/hw04/app/gradevis')
runApp('~/stat133/stat133-hws-fall17/hw04/app/gradevis')
runApp('~/stat133/stat133-hws-fall17/hw04/app/gradevis')
runApp('~/stat133/stat133-hws-fall17/hw04/app/gradevis')
runApp('~/stat133/stat133-hws-fall17/hw04/app/gradevis')
runApp('~/stat133/stat133-hws-fall17/hw04/app/gradevis')
